Exercise 5: Triggers

Scenario 1: Automatically update the last modified date when a customer's record is updated.
Question: Write a trigger UpdateCustomerLastModified that updates the LastModified column of the Customers table to the current date whenever a customer's record is updated.

CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END UpdateCustomerLastModified;

Scenario 2: Maintain an audit log for all transactions.
Question: Write a trigger LogTransaction that inserts a record into an AuditLog table whenever a transaction is inserted into the Transactions table.

CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (transactionId, accountId, amount, transactionDate)
    VALUES (:NEW.transactionId, :NEW.accountId, :NEW.amount, SYSDATE);
END LogTransaction;

Scenario 3: Enforce business rules on deposits and withdrawals.
Question: Write a trigger CheckTransactionRules that ensures withdrawals do not exceed the balance and deposits are positive before inserting a record into the Transactions table.

CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON transactions
FOR EACH ROW
DECLARE
    v_balance NUMBER;
BEGIN
    IF :NEW.transactionType = 'Withdrawal' THEN
        SELECT balance INTO v_balance FROM accounts WHERE accountId = :NEW.accountId FOR UPDATE;

        IF :NEW.amount > v_balance THEN
            RAISE_APPLICATION_ERROR(-20001, 'Error: Insufficient funds for the withdrawal.');
        END IF;
    END IF;

    IF :NEW.transactionType = 'Deposit' AND :NEW.amount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error: Deposit amount must be positive.');
    END IF;
END CheckTransactionRules;
