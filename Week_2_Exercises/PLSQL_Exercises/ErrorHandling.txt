Exercise 2: Error Handling

Scenario 1: Handle exceptions during fund transfers between accounts.
Question: Write a stored procedure SafeTransferFunds that transfers funds between two accounts. Ensure that if any error occurs (e.g., insufficient funds), an appropriate error message is logged and the transaction is rolled back.

CREATE SEQUENCE transactionId
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10000;

CREATE OR REPLACE PROCEDURE SafeTransferFunds(
    p_from_accountId IN NUMBER,
    p_to_accountId IN NUMBER,
    p_transcationType IN VARCHAR2,
    p_amount IN NUMBER
) IS
    insufficient_funds EXCEPTION;
    v_balance NUMBER;
BEGIN
    SELECT balance INTO v_balance FROM accounts WHERE accountId = p_from_accountId FOR UPDATE;

    IF v_balance < p_amount THEN
        RAISE insufficient_funds;
    END IF;

    UPDATE accounts
    SET balance = balance - p_amount
    WHERE accountId = p_from_accountId;

    UPDATE accounts
    SET balance = balance + p_amount
    WHERE accountId = p_to_accountId;

    INSERT INTO Transactions VALUES(transactionId.nextval, p_from_accountId, SYSDATE, p_amount, p_transcationType);

    COMMIT;
    
EXCEPTION
    WHEN insufficient_funds THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds in the source account.');
        
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END SafeTransferFunds;

Scenario 2: Manage errors when updating employee salaries.
Question: Write a stored procedure UpdateSalary that increases the salary of an employee by a given percentage. If the employee ID does not exist, handle the exception and log an error message.

CREATE OR REPLACE PROCEDURE UpdateSalary(
    p_employeeId IN NUMBER,
    p_percentage IN NUMBER
) IS
    employee_not_found EXCEPTION;
    v_salary NUMBER;
BEGIN
    SELECT salary INTO v_salary FROM employees WHERE employeeId = p_employeeId FOR UPDATE;

    UPDATE employees
    SET salary = salary + (salary * p_percentage / 100)
    WHERE employeeId = p_employeeId;

    COMMIT;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE employee_not_found;

    WHEN employee_not_found THEN
        DBMS_OUTPUT.PUT_LINE('Error: Employee ID ' || p_employeeId || ' not found.');

    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END UpdateSalary;

Scenario 3: Ensure data integrity when adding a new customer.
Question: Write a stored procedure AddNewCustomer that inserts a new customer into the Customers table. If a customer with the same ID already exists, handle the exception by logging an error and preventing the insertion.

CREATE OR REPLACE PROCEDURE AddNewCustomer(
    p_customerId IN NUMBER,
    p_name IN VARCHAR2,
    p_DOB IN DATE
) IS
    customer_exists EXCEPTION;
BEGIN
    INSERT INTO customers (customerId, name, DOB)
    VALUES (p_customerId, p_name, p_DOB);

    COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        ROLLBACK;
        RAISE customer_exists;

    WHEN customer_exists THEN
        DBMS_OUTPUT.PUT_LINE('Error: Customer with ID ' || p_customerId || ' already exists.');

    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END AddNewCustomer;
